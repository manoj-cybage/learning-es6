<script type="text/javascript">  var devScr = '<' + 'script src="https://maps.googleapis.com/maps/api/js?client=gme-crossmark&amp;language=' +'<%=  System.Threading.Thread.CurrentThread.CurrentCulture.Name %>'+'" '+'type="text/javascript">'+'<'+'/script>';        var stgScr = '<' + 'script src="https://maps.googleapis.com/maps/api/js?client=gme-crossmark&amp;language=' +'<%=  System.Threading.Thread.CurrentThread.CurrentCulture.Name %>'+'" '+'type="text/javascript">'+'<'+'/script>';        var prdScr = '<' + 'script src="https://maps.googleapis.com/maps/api/js?client=gme-crossmark&amp;language=' +'<%=  System.Threading.Thread.CurrentThread.CurrentCulture.Name %>'+'" '+'type="text/javascript">'+'<'+'/script>';        var lclScr = '<' + 'script src="https://maps.googleapis.com/maps/api/js?client=gme-crossmark&amp;language=' +'<%=  System.Threading.Thread.CurrentThread.CurrentCulture.Name %>'+'" '+'type="text/javascript">'+'<'+'/script>';  var host = document.location.hostname;        //need change this to CMKConnect app server names        if (host == "daldvweb002") {document.write(devScr);}        else if (host == "localhost") {document.write(lclScr);}        else if (host == "devstweb02") {document.write(stgScr);}        else if (host.match("crossmark.com") != null) { document.write(prdScr);}        else { document.write(prdScr); }        var map;        var gdir;        var mapHome;        var gdirHome;        var geocoder = null;        var addressMarker;        var addrArray;        var fromAddr = [];        var endAddr = fromAddr;        var toAddr = [];        var trMode;        var totalMiles = 0;        var totalDur = 0;        var HomeToFirstStopMiles = 0;        var HomeToFirstStopTime = 0;        var LastStopToHomeMiles = 0;        var LastStopToHomeTime = 0;        var maxWayPoints = 23;        var TotalLegs = [];        var directionsService;        var numRoutes = 0;        var RouteRepeaterClientID;        var RouteRepeater;        var DriveControl, PaidDriveControl, MilesControl, PaidMilesControl;        var Drive, PaidDrive, Miles, PaidMiles;        var TotalDrive = 0, TotalPaidDrive = 0, TotalMiles = 0, TotalPaidMiles = 0;        var DriveMileArray = 0;        var totalDistance = 0, TotalDuration = 0;        var rsCnt = 0;        var completedRoutes = 0;        var totalLoops = toAddr.length / maxWayPoints;                function body_onload()        {            trMode = google.maps.DirectionsTravelMode.DRIVING;            directionsService = new google.maps.DirectionsService();            if(document.getElementById('<%=txtCalculate.ClientID %>').value != "")            {                //ShowDM();                if(document.getElementById('<%=txtCalculate.ClientID %>').value == "Calculate")                {                    //alert('Calculate true');        addrArray = [<%=FromAddr %>,<%=ToAddr %>,endAddr];                    if (toAddr.length >= 1)                    {                      //  alert('Rep locations found.');                       onGDirectionsLoad();                    }                   }                 document.getElementById('CalculateErrorMessage').style.display = "inline";                document.getElementById('CalculateErrorMessage').innerHTML = '<%= GetGlobalResourceObject("Payroll", "PayrollTimeEntries_Js_BodyOnload_NoReportedTasks") %>';                document.getElementById('<%=txtMilesHidden.ClientID %>').value = 0;                document.getElementById('<%=txtTimeHidden.ClientID %>').value = 0;            }        }        function onGDirectionsLoad() {            var loops = [];            for (var rsCnt = 0; rsCnt <= Math.ceil(toAddr.length / maxWayPoints) ; rsCnt++) {                loops.push(rsCnt);            }            mapLoop(loops);        }        var mapLoop = function (arr) {            ProcessCalls(arr[rsCnt], function () {                rsCnt++;                if (rsCnt < arr.length) {                    mapLoop(arr);                }            });        }        function ProcessCalls(rsCnt, callback) {            var request = GetRequest(rsCnt);            ProcessRequet(request, callback);            return false;        }        function GetRequest(rsCnt) {            reqDone = false;            var waypts = [];            for (var i = 0; (i < maxWayPoints && ((i + (rsCnt * maxWayPoints)) < toAddr.length)) ; i++) {                waypts.push({                    location: toAddr[i + (rsCnt * maxWayPoints)],                    stopover: true                });            }            var originAddr = fromAddr[0];            var endAddrs = endAddr[0];            if (rsCnt != 0) {                originAddr = toAddr[(rsCnt * maxWayPoints) - 1];            }            if (rsCnt != parseInt(toAddr.length / maxWayPoints)) {                waypts.pop();                endAddrs = toAddr[(i - 1) + (rsCnt * maxWayPoints)];            }            var request = {                origin: originAddr,                destination: endAddrs,                waypoints: waypts,                optimizeWaypoints: false,                travelMode: trMode            };            return request;        }                function ProcessRequet(request, callback) {            reqDone = false;            directionsService.route(request, function (response, status) {                if (status == google.maps.DirectionsStatus.OK) {                    var legs = response.routes[0].legs;                    for (var i = 1; i < legs.length -1; i++) {                        TotalLegs.push(legs[i]);                    }                    completedRoutes = completedRoutes + 1;                    reqDone = true;                    if (toAddr.length % maxWayPoints != 0) {                        if (completedRoutes == Math.ceil(toAddr.length / maxWayPoints)) {                            PopulateRecords();                        }                    }                    else {                        if (completedRoutes > Math.ceil(toAddr.length / maxWayPoints)) {                            PopulateRecords();                        }                    }                }                else {                    handleMapErrors(status);                }            });        }        function PopulateRecords() {            numRoutes += TotalLegs.length;            totalDistance = 0;            totalDuration = 0;            for (var i = 0; i < TotalLegs.length; i++) {                totalDistance += TotalLegs[i].distance.value;                totalDuration += TotalLegs[i].duration.value;            }            totalMiles = totalDistance * 0.000621371192;            totalMiles = Math.round(totalMiles * 100) / 100;            totalDur = Math.round((totalDuration / 60));         if (numRoutes > 0) {             HomeToFirstStopMiles = TotalLegs[0].distance.value * 0.000621371192;             HomeToFirstStopMiles = Math.round(HomeToFirstStopMiles);             HomeToFirstStopTime = Math.round((TotalLegs[0].duration.value / 60));         if (numRoutes > 1) {             LastStopToHomeMiles = TotalLegs[numRoutes-1].distance.value * 0.000621371192;             LastStopToHomeMiles = Math.round(LastStopToHomeMiles);             LastStopToHomeTime = Math.round((TotalLegs[numRoutes-1].duration.value / 60));         }             RouteRepeaterClientID = document.getElementById('<%=RouteRepeaterHidden.ClientID%>').value;       DriveMileArray = "0,0,0,0;";       TotalDrive = 0;       TotalPaidDrive = 0;       TotalMiles = 0;       TotalPaidMiles = 0;       if (numRoutes > 0) {           for (i = 0; i < numRoutes; i++) {               Drive = Math.round((TotalLegs[i].duration.value / 60));               PaidDrive = Math.round((TotalLegs[i].duration.value / 60));               Miles = Math.round(TotalLegs[i].distance.value * 0.000621371192);               PaidMiles = Math.round(TotalLegs[i].distance.value * 0.000621371192);               if (i == 0) //Apply home to first stop rule               {                   if (HomeToFirstStopMiles <= 50) {                       PaidMiles = 0;                   }                   else {                       PaidMiles = HomeToFirstStopMiles - 50;                   }                   if (HomeToFirstStopTime <= 60) {                       PaidDrive = 0;                   }                   else {                       PaidDrive = HomeToFirstStopTime - 60;                   }               }               if (i == numRoutes-1) //apply the last stop to home rule               {                   if (LastStopToHomeMiles <= 50) {                       PaidMiles = 0;                   }                   else {                       PaidMiles = LastStopToHomeMiles - 50;                   }                   if (LastStopToHomeTime <= 60) {                       PaidDrive = 0;                   }                   else {                       PaidDrive = LastStopToHomeTime - 60;                   }               }               DriveMileArray = DriveMileArray + Drive + "," + PaidDrive + "," + Miles + "," + PaidMiles + ";";               TotalDrive = TotalDrive + Drive;               TotalPaidDrive = TotalPaidDrive + PaidDrive;               TotalMiles = TotalMiles + Miles;               TotalPaidMiles = TotalPaidMiles + PaidMiles;                              DriveControl = RouteRepeaterClientID + "_lblRouteDrive_" + (i); //alert(DriveControl);               document.getElementById(DriveControl).innerHTML = Drive;               PaidDriveControl = RouteRepeaterClientID + "_lblPaidDrive_" + (i);               document.getElementById(PaidDriveControl).innerHTML = PaidDrive;               MilesControl = RouteRepeaterClientID + "_lblRouteMiles_" + (i);               document.getElementById(MilesControl).innerHTML = Miles;               PaidMilesControl = RouteRepeaterClientID + "_lblPaidMiles_" + (i);               document.getElementById(PaidMilesControl).innerHTML = PaidMiles;               MilesInfoControl = RouteRepeaterClientID + "_hdMilesInfo_" + (i);                              document.getElementById(MilesInfoControl).value = Miles + "|" + PaidMiles + "|" + Drive + "|" + PaidDrive;           }           DriveControl = RouteRepeaterClientID + "_lblTotalEstimatedMiles";           document.getElementById(DriveControl).innerHTML = TotalDrive;           PaidDriveControl = RouteRepeaterClientID + "_lblTotalEligibleMiles";           document.getElementById(PaidDriveControl).innerHTML = TotalPaidDrive;           MilesControl = RouteRepeaterClientID + "_lblTotalEstimatedDrive";           document.getElementById(MilesControl).innerHTML = TotalMiles;           PaidMilesControl = RouteRepeaterClientID + "_lblTotalEligibleDrive";           document.getElementById(PaidMilesControl).innerHTML = TotalPaidMiles;                         document.getElementById('<%=txtMilesHidden.ClientID %>').value = TotalPaidMiles;           document.getElementById('<%=txtTimeHidden.ClientID %>').value = TotalPaidDrive;           document.getElementById('<%=lblTotalEligibleMilesValue.ClientID %>').innerHTML = TotalPaidMiles;           document.getElementById('<%=lblTotalEligibleDriveTimeValue.ClientID %>').innerHTML = TotalPaidDrive;          }                document.getElementById('<%=RouteArrayHidden.ClientID %>').value = DriveMileArray;      }        }    </script>
